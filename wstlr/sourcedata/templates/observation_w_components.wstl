// The functions in this file are called by the autogenerated code designed to 
// store rows from tabular datasets in FHIR as observations. Each variable is 
// recorded as an component in the row's observation. 

// Assign value and code associated with the given variable as a string
//
// Arguments:
//  table_name - Table from which the variable is to be found
//  varname - The variable's name / id from the data table
//  value - The value being recorded to the component
//
def BuildObsComponentString(table_name, varname, required value) {
    code.coding: HarmonizeMapped(varname, table_name);
    valueString: value;
}
// Assign value and code associated with the given variable as a 
// CodeableConcept
//
// Arguments:
//  table_name - Table from which the variable is to be found
//  varname - The variable's name / id from the data table
//  value - The value being recorded to the component}
//

def BuildObsComponentCategorical(study, table_name, varname, required value) {
    code.coding: HarmonizeMapped(varname, table_name);
    valueCodeableConcept.coding[]: HarmonizeMapped(value, varname);
}

// Assign value and code associated with the given variable as an Integer
//
// Arguments:
//  table_name - Table from which the variable is to be found
//  varname - The variable's name / id from the data table
//  value - The value being recorded to the component
//
def BuildObsComponentInteger(study, table_name, varname, required value) {
    code.coding: HarmonizeMapped(varname, table_name);
    if ($Type(value)="number") {
        valueQuantity.value: $ParseInt(value);
    } else {
        valueString: value;
    }
}

// Assign value and code associated with the given variable as a Numeric
//
// This function will attempt to record the value as a Floating point number
// but if that fails, it will save it as a string. 
//
// Arguments:
//  table_name - Table from which the variable is to be found
//  varname - The variable's name / id from the data table
//  value - The value being recorded to the component
def BuildObsComponentQuantity(study, table_name, varname, required value) {
    code.coding: HarmonizeMapped(varname, table_name);
        
    if ($Type(value)="number") {
        valueQuantity.value: $ParseFloat(value);
    } else {
        valueString: value;
    }
}

// Enumerate over each of the tables
// Required input: 
//   tables - list of DdTable objects
//   id_colname
{% for table in tables %} 
def AddSourceDataObservation-{{table.name}}(study, id, row_data) {
    var table_name: "{{table.name}}";
    var subject_id: row_data.{{table.id_col}};
    meta.tag[]: StudyMeta(study);
    {% if use_profiles -%}
        meta.profile[]: "https://nih-ncpi.github.io/ncpi-fhir-ig/StructureDefinition/raw-data-observation"
    {% endif -%}
    identifier[]: Key_Identifier(study, "Observation", $StrCat(study.id, ".", table_name, ".", id , ".", subject_id));
    identifier[0].use: "official";
    status: "final";
    resourceType: "Observation";
    code.coding[]: BuildCoding("74468-0", "Questionnaire form definition Document", "https://loinc.org");
    code.coding[]: HarmonizeMapped(table_name, "DataSet");
    code.text: $StrCat("Source data for data table, ", table_name);
    subject: Reference_Key_Identifier(study, "Patient", subject_id);

    // Variables
    {% for var in table.variables -%}
      {% if var.vartype == "enumeration" -%} 
    component[]: BuildObsComponentCategorical(study, table_name, "{{var.varname}}", row_data.{{var.fieldname}});
      {% elif var.vartype == "string" -%} 
    component[]: BuildObsComponentString(table_name, "{{var.varname}}", row_data.{{var.fieldname}});
      {% elif var.vartype == "integer" -%}
    component[]: BuildObsComponentInteger(study, table_name, "{{var.varname}}", row_data.{{var.fieldname}});
      {% elif var.vartype == "float" -%}
    component[]: BuildObsComponentQuantity(study, table_name, "{{var.varname}}", row_data.{{var.fieldname}});
      {% endif -%}
    {% endfor -%}
}
{% endfor -%}


// Enumerate over each of the tables for processing individual tables
// Required input: 
//   tables - list of DdTable objects
//   id_colname
{% for table in tables -%} 
{% if table.table_type == TableType.Embedded -%} 
def ProcessSourceData-Obs-embedded-{{table.name}}(study, row) {
    var id: $StrCat({{table.colnames}});
    out source_data: AddSourceDataObservation-{{table.name}}(study, id, row.{{table.name}}[]);
}
{% else %}
def ProcessSourceData-Obs-{{table.name}}(study, row) {
  {% if table.table_type == TableType.Default -%}
  var id: $StrCat({{table.colnames}});
  out source_data: AddSourceDataObservation-{{table.name}}(study, id, row);
  {% elif table.table_type == TableType.Embedded -%}
  out source_data: ProcessSourceData-Obs-embedded-{{table.name}}(study, row.{{table.name}}[]);
  {% elif table.table_type == TableType.Grouped -%}
  var id: $StrCat({{table.colnames}});
  out source_data: AddSourceDataObservation-{{table.name}}(study, id, row.content[]);
  {% endif %}
}
{% endif %}
{% endfor -%} 

// Enumerate over tables one last time to build the main process function
def BuildRawDataObs(resource) {
{% for table in tables -%}
  {% if table.table_type == TableType.Embedded %}
  $this: ProcessSourceData-Obs-embedded-{{table.name}}(resource.study, resource.{{table.parent_table}}[]);
  {% else -%}
  $this: ProcessSourceData-Obs-{{table.name}}(resource.study, resource.{{table.name}}[]);
  {% endif -%}
{% endfor %}
}
